{"version":3,"names":[],"mappings":"","sources":["base-view.js"],"sourcesContent":["\n// base chess view\n\n(function() {\n\n\tvar cbVar, cbView, currentGame;\n\t\n\tView.Game.cbTargetMesh = \"/res/ring-target.js\";\n\tView.Game.cbTargetSelectColor = 0xffffff;\n\tView.Game.cbTargetCancelColor = 0xff8800;\n\n\tView.Game.cbPromoSize = 2000;\n\t\n\tView.Game.xdInit = function(xdv) {\n\n\t\tthis.g.fullPath=this.mViewOptions.fullPath;\n\t\tthis.cbPieceByType={};\n\t\tcbVar=this.cbVar;\n\t\tcbView=this.cbDefineView();\n\t\tthis.cbView=cbView;\n\t\tthis.cbClearPieces();\n\t\tthis.cbCreateLights(xdv);\n\t\tthis.cbCreateScreens(xdv);\n\t\tthis.cbCreateBoard(xdv);\n\t\tthis.cbCreatePromo(xdv);\n\t\tthis.cbCreatePieces(xdv);\n\t\tthis.cbCreateCells(xdv);\n\t}\t\n\t\n\t// useful to initialize pieces and board while the real meshes aren't loaded yet\n\tView.Game.cbMakeDummyMesh = function(xdv) {\n\t\tif(typeof THREE != \"undefined\")\n\t\t    return new THREE.Mesh( new THREE.CubeGeometry( .0001, .0001, .0001 ), \n\t\t\t\t\t      new THREE.MeshLambertMaterial() );\n\t\telse\n\t\t\treturn null;\n\t}\n\t\n\tView.Game.cbCurrentGame = function() {\n\t\treturn currentGame;\n\t}\n\t\n\tView.Game.cbCreatePieces = function(xdv) {\n\n\t\tvar dummyMesh=this.cbMakeDummyMesh(xdv);\n\n\t\tfor(var index=0;index<this.cbPiecesCount;index++) {\n\t\t\txdv.createGadget(\"piece#\"+index,{\n\t\t\t\tbase: {\n\t\t\t\t},\n\t\t\t\t\"2d\": {\n\t\t\t\t\ttype: \"sprite\",\n\t\t\t\t},\n\t\t\t\t\"3d\":{\n\t\t\t\t\ttype:\"custommesh3d\",\n\t\t\t\t\tcreate: function(force,options,delay){\n\t\t\t\t\t    return dummyMesh;\n\t\t\t\t\t},\n\t\t\t\t},\t\t\t\t\n\t\t\t});\n\t\t}\n\t}\n\n\tView.Game.cbCreateBoard = function(xdv) {\n\t\t//console.warn(\"View.Game.cbCreateBoard must be overriden\");\n\t\tvar dummyMesh=this.cbMakeDummyMesh(xdv);\n\n\t\txdv.createGadget(\"board\",{\n\t\t\tbase: {\n\t\t\t},\n\t\t\t\"2d\": {\n\t\t\t\ttype: \"canvas\",\n\t\t\t\twidth: 12000,\n\t\t\t\theight: 12000,\n\t\t\t\tdraw: function(ctx) {\n\t\t\t\t\tconsole.warn(\"board draw must be overridden\");\n\t\t\t\t},\n\t\t\t},\n\t\t\t\"3d\":{\n\t\t\t\ttype:\"custommesh3d\",\n\t\t\t\treceiveShadow:true,\n\t\t\t\tcreate: function(force,options,delay){\n\t\t\t\t    return dummyMesh;\n\t\t\t\t},\n\t\t\t},\t\t\t\t\n\t\t});\t\t\n\t}\n\n\tView.Game.cbCreateCells = function(xdv) {\n\t\tvar $this=this;\n\t\tfor(var pos=0;pos<this.g.boardSize;pos++) \n\t\t\t(function(pos) {\n\t\t\t\txdv.createGadget(\"cell#\"+pos,{\n\t\t\t\t\t\"2d\": {\n\t\t\t\t\t\tz: 101,\n\t\t\t\t\t\ttype: \"element\",\n\t\t\t\t\t\tinitialClasses: $this.cbCellClass(xdv,pos),\n\t\t\t\t\t\twidth: 1300,\n\t\t\t\t\t\theight: 1300,\n\t\t\t\t\t},\t\t\t\t\t\n\t\t\t\t});\n\t\t\t\txdv.createGadget(\"clicker#\"+pos,$.extend(true,{\n\t\t\t\t\t\"2d\": {\n\t\t\t\t\t\tz: 103,\n\t\t\t\t\t\ttype: \"element\",\n\t\t\t\t\t\tinitialClasses: \"cb-clicker\",\n\t\t\t\t\t},\n\t\t\t\t\t\"3d\": {\n\t\t\t\t\t\ttype: \"meshfile\",\n\t\t\t\t\t\tfile : $this.g.fullPath+$this.cbTargetMesh,\n\t\t\t\t\t\tflatShading: true,\n\t\t\t\t\t\tcastShadow: true,\n\t\t\t\t\t\tsmooth : 0,\n\t\t\t\t\t\tscale:[.9,.9,.9],\n\t\t\t\t\t\tmaterials: { \n\t\t\t\t\t\t\t\"square\" : {\n\t\t\t\t\t\t\t\ttransparent: true,\n\t\t\t\t\t\t\t\topacity: 0,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"ring\" : {\n\t\t\t\t\t\t\t\tcolor : $this.cbTargetSelectColor,\n\t\t\t\t\t\t\t\topacity: 1,\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t},$this.cbView.clicker));\n\t\t\t})(pos);\n\t}\n\t\n\tView.Game.cbCreatePromo = function(xdv) {\n\t\txdv.createGadget(\"promo-board\",{\n\t\t\tbase: {\n\t\t\t\ttype: \"element\",\n\t\t\t\tx: 0,\n\t\t\t\ty: 0,\n\t\t\t\twidth: 2000,\n\t\t\t\theight: 2000,\n\t\t\t\tz: 108,\n\t\t\t\tcss: {\n\t\t\t\t\t\"background-color\": \"White\",\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t\txdv.createGadget(\"promo-cancel\",{\n\t\t\tbase: {\n\t\t\t\ttype: \"image\",\n\t\t\t\tfile: this.g.fullPath+\"/res/images/cancel.png\",\n\t\t\t\tx: 0,\n\t\t\t\ty: 0,\n\t\t\t\twidth: 800,\n\t\t\t\theight: 800,\n\t\t\t\tz: 109,\n\t\t\t},\n\t\t});\n\t\tfor(var i=0;i<this.g.pTypes.length;i++) {\n\t\t\txdv.createGadget(\"promo#\"+i,{\n\t\t\t\tbase: {\n\t\t\t\t\ty: 0,\n\t\t\t\t\tz: 109,\n\t\t\t\t\ttype: \"sprite\",\n\t\t\t\t\tclipwidth: 100,\n\t\t\t\t\tclipheight: 100,\n\t\t\t\t\twidth: 1200,\n\t\t\t\t\theight: 1200,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t}\n\t\n\tView.Game.xdBuildScene = function(xdv){\n\n\t\tcurrentGame=this;\n\t\tcbVar=this.cbVar;\n\t\tcbView=this.cbDefineView();\n\t\tthis.cbView=cbView;\n\n\t\tfor(var i=0;i<this.cbExtraLights.length;i++) {\n\t\t\txdv.updateGadget(\"extralights#\"+i,{\n\t\t\t\t\"3d\":{\n\t\t\t\t\tvisible:true,\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\t\n\t\txdv.updateGadget(\"board\",$.extend({\n\t\t\tbase: {\n\t\t\t\tvisible: true,\n\t\t\t},\n\t\t},this.cbView.board));\n\t\tfor(var pos=0;pos<this.g.boardSize;pos++) {\n\t\t\t(function(pos) {\n\t\t\t\tvar displaySpec=currentGame.cbMakeDisplaySpec(pos,0);\n\t\t\t\tvar cellSpec=$.extend(true,{},displaySpec,{\n\t\t\t\t\t\"base\": {\n\t\t\t\t\t\tvisible: true,\n\t\t\t\t\t},\n\t\t\t\t},currentGame.cbView.clicker,currentGame.cbView.cell);\n\t\t\t\txdv.updateGadget(\"cell#\"+pos,cellSpec);\n\t\t\t\t$.extend(true,displaySpec,currentGame.cbView.clicker);\n\t\t\t\txdv.updateGadget(\"clicker#\"+pos,displaySpec);\n\t\t\t})(pos);\n\t\t}\n\t\t\n\t\tvar scaleScreen=3;\n\t\tvar zScreen=3000;\n\t\tvar zScreenVignette=1500;\n\t\tvar yScreen=10000;\n\t\tvar screenAngle=0;\n\t\tvar thumbDist=.89;\n\t\tvar thumbOffset=5500;\t\t\n\t\tvar inclination=25;\n\t\t\n\t\txdv.updateGadget(\"videoa\",{\n\t\t\t\"3d\": {\n\t\t\t\tvisible: true,\n\t\t\t\tplayerSide: 1,\n\t\t\t\tz: zScreen,\n\t\t\t\ty: this.mViewAs==1?yScreen:-yScreen,\n\t\t\t\trotate: this.mViewAs==1?-(180+screenAngle):-screenAngle,\n\t\t\t\trotateX: this.mViewAs==1?inclination:-inclination,\n\t\t\t\tscale: [scaleScreen,scaleScreen,scaleScreen],\n\t\t\t},\n\t\t});\n\t\txdv.updateGadget(\"videoabis\",{\n\t\t\t\"3d\": {\n\t\t\t\tvisible: true,\n\t\t\t\tplayerSide: -1,\n\t\t\t\tz: zScreenVignette,\n\t\t\t\tx: this.mViewAs==1?-thumbOffset:thumbOffset,\n\t\t\t\ty: this.mViewAs==1?thumbDist*yScreen:-thumbDist*yScreen,\n\t\t\t\trotate: this.mViewAs==1?-(180+screenAngle):-screenAngle,\n\t\t\t\trotateX: this.mViewAs==1?inclination:-inclination,\n\t\t\t\tscale: [scaleScreen/4,scaleScreen/4,scaleScreen/4],\n\t\t\t},\n\t\t});\n\n\t\txdv.updateGadget(\"videob\",{\n\t\t\t\"3d\": {\n\t\t\t\tvisible: true,\n\t\t\t\tplayerSide: -1,\n\t\t\t\tz: zScreen,\n\t\t\t\ty: this.mViewAs==1?-yScreen:yScreen,\n\t\t\t\trotate: this.mViewAs==1?-screenAngle:-(180+screenAngle),\n\t\t\t\trotateX: this.mViewAs==1?-inclination:inclination,\n\t\t\t\tscale: [scaleScreen,scaleScreen,scaleScreen],\n\t\t\t},\n\t\t});\n\t\txdv.updateGadget(\"videobbis\",{\n\t\t\t\"3d\": {\n\t\t\t\tvisible: true,\n\t\t\t\tplayerSide: 1,\n\t\t\t\tz: zScreenVignette,\n\t\t\t\tx: this.mViewAs==1?thumbOffset:-thumbOffset,\n\t\t\t\ty: this.mViewAs==1?-thumbDist*yScreen:thumbDist*yScreen,\n\t\t\t\trotate: this.mViewAs==1?-screenAngle:-(180+screenAngle),\n\t\t\t\trotateX: this.mViewAs==1?-inclination:inclination,\n\t\t\t\tscale: [scaleScreen/4,scaleScreen/4,scaleScreen/4],\n\t\t\t},\n\t\t});\n\t\t\n\t\txdv.updateGadget(\"promo-board\",{\n\t\t\tbase: {\n\t\t\t\tvisible: false,\n\t\t\t},\n\t\t});\n\t\txdv.updateGadget(\"promo-cancel\",{\n\t\t\tbase: {\n\t\t\t\tvisible: false,\n\t\t\t},\n\t\t});\n\t\tfor(var i=0;i<this.g.pTypes.length;i++) {\n\t\t\txdv.updateGadget(\"promo#\"+i,{\n\t\t\t\tbase: {\n\t\t\t\t\tvisible: false,\n\t\t\t\t},\n\t\t\t});\n\t\t};\n\t}\n\t\n\tView.Game.cbDisplayBoardFn = function(spec) {\n\t\t\n\t\tvar $this=this;\n\t\t\n\t\treturn function(force,options,delay) {\n\n\t\t\tvar key = spec.style+\"_\"+spec.margins.x+\"_\"+spec.margins.y+\"_\"+$this.mNotation+\"_\"+$this.mViewAs;\n\t\t\t\n\t\t\tvar avat=this;\n\t\t\tif(key!=this._cbKey){\n\t\t\t\tthis._cbKey=key;\n\t\t\t\tspec.display.call(currentGame,spec,avat,function(mesh) {\n\t\t\t\t\tavat.replaceMesh(mesh,options,delay);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tView.Game.cbDrawBoardFn = function(spec) {\n\t\treturn function(ctx) {\n\t\t\tspec.draw.call(currentGame,spec,this,ctx);\n\t\t}\n\t}\n\t\n\tView.Game.cbMakeDisplaySpec = function(pos,side) {\n\t\tvar displaySpec={};\t\t\n\t\tfor(var c in this.cbView.coords) {\n\t\t\tvar coordsFn=this.cbView.coords[c];\n\t\t\tvar coord=coordsFn.call(this,pos);\n\t\t\tdisplaySpec[c]={\n\t\t\t\tx: coord.x || 0,\n\t\t\t\ty: coord.y || 0,\n\t\t\t\tz: coord.z || 0,\n\t\t\t\trotateX: coord.rx || 0,\n\t\t\t\trotateY: (coord.ry || 0) * (c==\"3d\"?(this.mViewAs*side<0?-1:1):0), // TODO handle better side orientation\n\t\t\t\trotate: (coord.rz || 0) + (c==\"3d\"?(this.mViewAs*side<0?180:0):0), // TODO handle better side orientation\n\t\t\t\t/*\n\t\t\t\trotateY: coord.ry || 0,\n\t\t\t\trotate: (coord.rz || 0) + (c==\"3d\"?(this.mViewAs*side>0?0:180):0), // TODO handle better side orientation\n\t\t\t\t*/\n\t\t\t}\n\t\t}\n\t\treturn displaySpec;\n\t}\n\t\n\tView.Game.cbMakeDisplaySpecForPiece = function(aGame,pos,piece) {\n\t\tvar displaySpec=this.cbMakeDisplaySpec(pos,piece.s);\t\t\n\t\tif(cbVar.pieceTypes[piece.t]===undefined) {\n\t\t\tconsole.warn(\"Piece type\",piece.t,\"not defined in model\");\n\t\t\treturn;\n\t\t}\n\t\tvar aspect=cbVar.pieceTypes[piece.t].aspect || cbVar.pieceTypes[piece.t].name;\n\t\tif(!aspect) {\n\t\t\tconsole.warn(\"Piece type\",piece.t,\"has no aspect defined\");\n\t\t\treturn;\t\t\t\t\n\t\t}\n\t\tfunction BuildSpec(spec,specs,aspect) {\n\t\t\tif(specs)\n\t\t\t\treturn $.extend(true,spec,specs['default'],specs[aspect]);\n\t\t\treturn {};\n\t\t}\n//\t\tdisplaySpec=BuildSpec(displaySpec,aGame.cbPieces,aspect);\n//\t\tif(aGame.cbPieces[piece.s])\n//\t\t\tdisplaySpec=BuildSpec(displaySpec,aGame.cbPieces[piece.s],aspect);\n\t\tif(cbView.pieces) {\n\t\t\tdisplaySpec=BuildSpec(displaySpec,cbView.pieces,aspect);\n\t\t\tif(cbView.pieces[piece.s])\n\t\t\t\tdisplaySpec=BuildSpec(displaySpec,cbView.pieces[piece.s],aspect);\n\t\t}\n\t\treturn displaySpec;\n\t}\n\t\n\tView.Board.xdDisplay = function(xdv, aGame) {\n\t\tvar $this=this;\n\t\tfor(var index=0;index<this.pieces.length;index++) {\n\t\t\tvar piece=this.pieces[index];\n\t\t\tif(piece.p<0)\n\t\t\t\txdv.updateGadget(\"piece#\"+index,{\n\t\t\t\t\tbase: {\n\t\t\t\t\t\tvisible: false,\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\telse {\n\t\t\t\tvar displaySpec=aGame.cbMakeDisplaySpecForPiece(aGame,piece.p,piece);\n\t\t\t\tdisplaySpec=$.extend(true,{\n\t\t\t\t\tbase: {\n\t\t\t\t\t\tvisible: true,\n\t\t\t\t\t},\n\t\t\t\t\t\"2d\": {\n\t\t\t\t\t\topacity: 1,\n\t\t\t\t\t},\n\t\t\t\t\t\"3d\": {\n\t\t\t\t\t\tpositionEasingUpdate: null,\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t},\n\t\t\t\t},displaySpec);\n\t\t\t\t\n\t\t\t\t//console.warn(\"display\",displaySpec);\n\t\t\t\t\t\n\t\t\t\txdv.updateGadget(\"piece#\"+index,displaySpec);\n\t\t\t}\n\t\t}\n\t\tfor(;index<aGame.cbPiecesCount;index++)\n\t\t\txdv.updateGadget(\"piece#\"+index,{\n\t\t\t\tbase: {\n\t\t\t\t\tvisible: false,\n\t\t\t\t}\n\t\t\t});\n\t}\n\t\n\tView.Game.cbExtraLights = [{\n\t\tcolor: 0xffffff,\n\t\tintensity: 0.8,\n\t\tposition: [9, 14, -9],\n\t\tprops: {\n\t\t\tshadowCameraNear: 10,\n\t\t\tshadowCameraFar: 25,\n\t\t\tcastShadow: true,\n\t\t\t//shadowDarkness: .25,\n\t\t\tshadowMapWidth: 2048,\n\t\t\tshadowMapHeight: 2048,\n\t\t},\n\t}]; \n\n\tView.Game.cbCreateLights = function(xdv) {\n\t\tvar $this = this;\n\t\t// lights\n\t\tfor(var i=0;i<this.cbExtraLights.length;i++) {\n\t\t\t(function(light,index) {\n\t\t\t\txdv.createGadget(\"extralights#\"+index,{\n\t\t\t\t\t\"3d\": {\n\t\t\t\t\t\ttype: \"custommesh3d\",\n\t\t\t\t\t\tcreate: function(callback){\n\t\t\t\t\t\t\t// spot lighting\n\t\t\t\t\t\t\tvar spotLight1 = new THREE.SpotLight( light.color, light.intensity );\n\t\t\t\t\t\t\t//for(var prop in light.props)\n\t\t\t\t\t\t\t\t//spotLight1[prop] = light.props[prop];\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tspotLight1.shadow.camera.far = light.props.shadowCameraFar;\n\t\t\t\t\t\t\tspotLight1.shadow.camera.near = light.props.shadowCameraNear;\n\t\t\t\t\t\t\tspotLight1.shadow.mapSize.width = light.props.shadowMapWidth;\n\t\t\t\t\t\t\tspotLight1.shadow.mapSize.height = light.props.shadowMapHeight;\n\n\t\t\t\t\t\t\tspotLight1.position.set.apply(spotLight1.position,light.position);\t\n\t\t\t\t\t\t\tvar mesh=new THREE.Mesh();\n\t\t\t\t\t\t\tmesh.add(spotLight1);\n\t\t\t\t\t\t\tvar target = new THREE.Object3D();\n\t\t\t\t\t\t\tmesh.add(target);\n\t\t\t\t\t\t\tspotLight1.target = target;\n\n\t\t\t\t\t\t\tcallback(mesh);\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t\n\t\t\t})(this.cbExtraLights[i],i);\n\t\t}\n\t}\n\t\n\t// 'this' is not a Game but an Avatar object\n\tView.Game.cbCreateScreen = function(videoTexture) {\n\t\t// flat screens\n\t\tvar gg=new THREE.PlaneGeometry(4,3,1,1);\n\t\tvar gm=new THREE.MeshPhongMaterial({color:0xffffff,map:videoTexture,shading:THREE.FlatShading,emissive:{r:1,g:1,b:1}});\n\t\tvar mesh = new THREE.Mesh( gg , gm );\n\t\tthis.objectReady(mesh); \n\t\treturn null;\n\t}\n\t\n\tView.Game.cbCreateScreens = function(xdv) {\n\t\tvar $this=this;\n\t\txdv.createGadget(\"videoa\",{\n\t\t\t\"3d\": {\n\t\t\t\ttype : \"video3d\",\t\t\t\t\n\t\t\t\tmakeMesh: function(videoTexture){\n\t\t\t\t\treturn $this.cbCreateScreen.call(this,videoTexture);\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t\txdv.createGadget(\"videoabis\",{\n\t\t\t\"3d\": {\n\t\t\t\ttype : \"video3d\",\t\t\t\t\n\t\t\t\tmakeMesh: function(videoTexture){\n\t\t\t\t\treturn $this.cbCreateScreen.call(this,videoTexture);\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t\txdv.createGadget(\"videob\",{\n\t\t\t\"3d\": {\n\t\t\t\ttype : \"video3d\",\t\t\t\t\n\t\t\t\tmakeMesh: function(videoTexture){\n\t\t\t\t\treturn $this.cbCreateScreen.call(this,videoTexture);\n\t\t\t\t},\n\t\t\t},\n\t\t});\t\n\t\txdv.createGadget(\"videobbis\",{\n\t\t\t\"3d\": {\n\t\t\t\ttype : \"video3d\",\t\t\t\t\n\t\t\t\tmakeMesh: function(videoTexture){\n\t\t\t\t\treturn $this.cbCreateScreen.call(this,videoTexture);\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t}\n\t\n\tView.Board.xdInput = function(xdv, aGame) {\n\t\t\n\t\tfunction HidePromo() {\n\t\t\txdv.updateGadget(\"promo-board\",{\n\t\t\t\tbase: {\n\t\t\t\t\tvisible: false,\n\t\t\t\t}\n\t\t\t});\n\t\t\txdv.updateGadget(\"promo-cancel\",{\n\t\t\t\tbase: {\n\t\t\t\t\tvisible: false,\n\t\t\t\t}\n\t\t\t});\t\t\n\t\t}\n\t\t\n\t\treturn {\n\t\t\tinitial: {\n\t\t\t\tf: null,\n\t\t\t\tt: null,\n\t\t\t\tpr: null,\n\t\t\t},\n\t\t\tgetActions: function(moves,currentInput) {\n\t\t\t\tvar actions={};\n\t\t\t\tif(currentInput.f==null) {\n\t\t\t\t\tmoves.forEach(function(move) {\n\t\t\t\t\t\tif(actions[move.f]===undefined)\n\t\t\t\t\t\t\tactions[move.f]={\n\t\t\t\t\t\t\t\tf: move.f,\n\t\t\t\t\t\t\t\tmoves: [],\n\t\t\t\t\t\t\t\tclick: [\"piece#\"+this.board[move.f],\"clicker#\"+move.f],\n\t\t\t\t\t\t\t\tview: [\"clicker#\"+move.f],\n\t\t\t\t\t\t\t\thighlight: function(mode) {\n\t\t\t\t\t\t\t\t\txdv.updateGadget(\"cell#\"+move.f,{\n\t\t\t\t\t\t\t\t\t\t\"2d\": {\n\t\t\t\t\t\t\t\t\t\t\tclasses: mode==\"select\"?\"cb-cell-select\":\"cb-cell-cancel\",\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\topacity: aGame.mShowMoves || mode==\"cancel\"?1:0,\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t});\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\txdv.updateGadget(\"clicker#\"+move.f,{\n\t\t\t\t\t\t\t\t\t\t\"3d\": {\n\t\t\t\t\t\t\t\t\t\t\tmaterials: {\n\t\t\t\t\t\t\t\t\t\t\t\tring: {\n\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: mode==\"select\"?aGame.cbTargetSelectColor:aGame.cbTargetCancelColor,\n\t\t\t\t\t\t\t\t\t\t\t\t\topacity: aGame.mShowMoves || mode==\"cancel\"?1:0,\n\t\t\t\t\t\t\t\t\t\t\t\t\ttransparent: aGame.mShowMoves || mode==\"cancel\"?false:true,\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\tcastShadow: aGame.mShowMoves || mode==\"cancel\",\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t});\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tunhighlight: function() {\n\t\t\t\t\t\t\t\t\txdv.updateGadget(\"cell#\"+move.f,{\n\t\t\t\t\t\t\t\t\t\t\"2d\": {\n\t\t\t\t\t\t\t\t\t\t\tclasses: \"\",\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t});\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tvalidate: {\n\t\t\t\t\t\t\t\t\tf: move.f,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tactions[move.f].moves.push(move);\n\t\t\t\t\t},this);\n\t\t\t\t} else if(currentInput.t==null) {\n\t\t\t\t\tmoves.forEach(function(move) {\n\t\t\t\t\t\tvar target = move.cg===undefined?move.t:move.cg;\n\t\t\t\t\t\tif(actions[target]===undefined) {\n\t\t\t\t\t\t\tactions[target]={\n\t\t\t\t\t\t\t\tt: move.t,\n\t\t\t\t\t\t\t\tmoves: [],\n\t\t\t\t\t\t\t\tclick: [\"piece#\"+this.board[target],\"clicker#\"+target],\n\t\t\t\t\t\t\t\tview: [\"clicker#\"+target],\n\t\t\t\t\t\t\t\thighlight: function(mode) {\n\t\t\t\t\t\t\t\t\txdv.updateGadget(\"cell#\"+target,{\n\t\t\t\t\t\t\t\t\t\t\"2d\": {\n\t\t\t\t\t\t\t\t\t\t\tclasses: mode==\"select\"?\"cb-cell-select\":\"cb-cell-cancel\",\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\topacity: aGame.mShowMoves || mode==\"cancel\"?1:0,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t});\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\txdv.updateGadget(\"clicker#\"+target,{\n\t\t\t\t\t\t\t\t\t\t\"3d\": {\n\t\t\t\t\t\t\t\t\t\t\tmaterials: {\n\t\t\t\t\t\t\t\t\t\t\t\tring: {\n\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: mode==\"select\"?aGame.cbTargetSelectColor:aGame.cbTargetCancelColor,\n\t\t\t\t\t\t\t\t\t\t\t\t\topacity: aGame.mShowMoves || mode==\"cancel\"?1:0,\n\t\t\t\t\t\t\t\t\t\t\t\t\ttransparent: aGame.mShowMoves || mode==\"cancel\"?false:true,\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\tcastShadow: aGame.mShowMoves || mode==\"cancel\",\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t});\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tunhighlight: function(mode) {\n\t\t\t\t\t\t\t\t\txdv.updateGadget(\"cell#\"+target,{\n\t\t\t\t\t\t\t\t\t\t\"2d\": {\n\t\t\t\t\t\t\t\t\t\t\tclasses: \"\",\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t});\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tvalidate: {\n\t\t\t\t\t\t\t\t\tt: move.t,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\texecute: function(callback) {\n\t\t\t\t\t\t\t\t\tvar $this=this;\n\t\t\t\t\t\t\t\t\tthis.cbAnimate(xdv,aGame,move,function() {\n\t\t\t\t\t\t\t\t\t\tvar promoMoves=actions[move.t].moves;\n\t\t\t\t\t\t\t\t\t\tif(promoMoves.length>1) {\n\t\t\t\t\t\t\t\t\t\t\txdv.updateGadget(\"promo-board\",{\n\t\t\t\t\t\t\t\t\t\t\t\tbase: {\n\t\t\t\t\t\t\t\t\t\t\t\t\tvisible: true,\n\t\t\t\t\t\t\t\t\t\t\t\t\twidth: aGame.cbPromoSize*(promoMoves.length+1),\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\txdv.updateGadget(\"promo-cancel\",{\n\t\t\t\t\t\t\t\t\t\t\t\tbase: {\n\t\t\t\t\t\t\t\t\t\t\t\t\tvisible: true,\n\t\t\t\t\t\t\t\t\t\t\t\t\tx: promoMoves.length*aGame.cbPromoSize/2,\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\tpromoMoves.forEach(function(move,index) {\n\t\t\t\t\t\t\t\t\t\t\t\tvar aspect=cbVar.pieceTypes[move.pr].aspect || cbVar.pieceTypes[move.pr].name;\n\t\t\t\t\t\t\t\t\t\t\t\tvar aspectSpec = $.extend(true,{},aGame.cbView.pieces[\"default\"],aGame.cbView.pieces[aspect]);\n\t\t\t\t\t\t\t\t\t\t\t\tif(aGame.cbView.pieces[this.mWho])\n\t\t\t\t\t\t\t\t\t\t\t\t\taspectSpec = $.extend(true,aspectSpec,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\taGame.cbView.pieces[this.mWho][\"default\"],aGame.cbView.pieces[this.mWho][aspect]);\n\t\t\t\t\t\t\t\t\t\t\t\txdv.updateGadget(\"promo#\"+move.pr, {\n\t\t\t\t\t\t\t\t\t\t\t\t\tbase: $.extend(aspectSpec[\"2d\"], { \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tx: (index-promoMoves.length/2)*aGame.cbPromoSize \n\t\t\t\t\t\t\t\t\t\t\t\t\t}),\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t});\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t},$this);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tunexecute: function() {\n\t\t\t\t\t\t\t\t\tif(move.c!=null) {\n\t\t\t\t\t\t\t\t\t\tvar piece1=this.pieces[move.c];\n\t\t\t\t\t\t\t\t\t\tvar displaySpec1=aGame.cbMakeDisplaySpecForPiece(aGame,piece1.p,piece1);\n\t\t\t\t\t\t\t\t\t\tdisplaySpec1=$.extend(true,{\n\t\t\t\t\t\t\t\t\t\t\tbase: {\n\t\t\t\t\t\t\t\t\t\t\t\tvisible: true,\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\"2d\": {\n\t\t\t\t\t\t\t\t\t\t\t\topacity: 1,\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\"3d\": {\n\t\t\t\t\t\t\t\t\t\t\t\tpositionEasingUpdate: null,\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t},displaySpec1);\n\t\t\t\t\t\t\t\t\t\txdv.updateGadget(\"piece#\"+move.c,displaySpec1);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tvar piece=this.pieces[this.board[move.f]];\n\t\t\t\t\t\t\t\t\tvar displaySpec=aGame.cbMakeDisplaySpecForPiece(aGame,piece.p,piece);\n\t\t\t\t\t\t\t\t\txdv.updateGadget(\"piece#\"+piece.i,displaySpec);\n\t\t\t\t\t\t\t\t\tHidePromo();\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(move.cg!==undefined) {\n\t\t\t\t\t\t\tactions[target].validate.cg=move.cg;\n\t\t\t\t\t\t\tactions[target].execute=function(callback) {\n\t\t\t\t\t\t\t\tthis.cbAnimate(xdv,aGame,move,function() {\n\t\t\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t\tactions[target].moves.push(move);\n\t\t\t\t\t},this);\n\t\t\t\t} else if(currentInput.pr==null) {\n\t\t\t\t\tvar promos=[];\n\t\t\t\t\tmoves.forEach(function(move) {\n\t\t\t\t\t\tif(move.pr!==undefined) {\n\t\t\t\t\t\t\tif(actions[move.pr]===undefined) {\n\t\t\t\t\t\t\t\tactions[move.pr]={\n\t\t\t\t\t\t\t\t\tpr: move.pr,\n\t\t\t\t\t\t\t\t\tmoves: [],\n\t\t\t\t\t\t\t\t\tclick: [\"promo#\"+move.pr],\n\t\t\t\t\t\t\t\t\t//view: [\"promo#\"+move.pr],\n\t\t\t\t\t\t\t\t\tvalidate: {\n\t\t\t\t\t\t\t\t\t\tpr: move.pr,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tcancel: [\"promo-cancel\"],\n\t\t\t\t\t\t\t\t\tpost: HidePromo,\n\t\t\t\t\t\t\t\t\tskipable: true,\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tpromos.push(move.pr);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tactions[move.pr].moves.push(move);\n\t\t\t\t\t\t}\n\t\t\t\t\t},this);\n\t\t\t\t\tif(promos.length>1) // avoid loading the avatar if forced promotion (only 1 choice)\n\t\t\t\t\t\tpromos.forEach(function(pr) {\n\t\t\t\t\t\t\tactions[pr].view=[\"promo#\"+pr];\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn actions;\n\t\t\t},\n\t\t}\n\t}\n\n\tView.Game.cbCellClass = function(xdv, pos) {\n\t\tvar cellClass;\n\t\tif((pos+(pos-pos%this.g.NBCOLS)/this.g.ROWS)%2)\n\t\t\tcellClass=\"classic-cell-black\";\n\t\telse\n\t\t\tcellClass=\"classic-cell-white\";\n\t\treturn \"classic-cell \"+cellClass;\n\t}\t\n\t\t\n\tView.Board.xdPlayedMove = function(xdv, aGame, aMove) {\n\t\taGame.mOldBoard.cbAnimate(xdv,aGame,aMove,function() {\n\t\t\taGame.MoveShown();\n\t\t});\n\t}\n\n\tView.Board.cbAnimate = function(xdv,aGame,aMove,callback) {\n\t\tvar $this=this;\n\t\tvar animCount=1;\n\t\tvar tacSound=false;\n\t\t\n\t\tfunction EndAnim() {\n\t\t\tif(--animCount==0){\n\t\t\t\tif(tacSound)\n\t\t\t\t\taGame.PlaySound(\"tac\"+(1+Math.floor(Math.random()*3)));\n\t\t\t\tcallback();\n\t\t\t}\n\t\t}\n\t\tvar piece=this.pieces[this.board[aMove.f]];\n\n\t\tvar displaySpec0=aGame.cbMakeDisplaySpec(aMove.f,piece.s);\n\t\tvar displaySpec=aGame.cbMakeDisplaySpecForPiece(aGame,aMove.t,piece);\n\t\tfor(var skin in displaySpec0) {\n\t\t\tvar spec=displaySpec0[skin];\n\t\t\tif(spec.z===undefined)\n\t\t\t\tcontinue;\n\t\t\t(function(skin) {\n\t\t\t\tvar z0=spec.z;\n\t\t\t\tvar z2=displaySpec[skin].z;\n\t\t\t\tvar z1=$this.cbMoveMidZ(aGame,aMove,z0,z2,skin);\n\t\t\t\tvar c=z0;\n\t\t\t\tvar S1=c-z1;\n\t\t\t\tvar S2=c-z2;\n\t\t\t\t\n\t\t\t\tif(z1!=(z0+z2)/2)\n\t\t\t\t\ttacSound=true;\n\n\t\t\t\tvar A=-1;\n\t\t\t\tvar B=4*S1-2*S2;\n\t\t\t\tvar C=-S2*S2;\n\t\t\t\tvar D=Math.abs(B*B-4*A*C);\n\t\t\t\tvar a1=(-B-Math.sqrt(D))/(2*A);\n\t\t\t\tvar a2=(-B+Math.sqrt(D))/(2*A);\n\t\t\t\tvar a=a1;\n\t\t\t\tvar b=-a-S2;\n\t\t\t\tif(a==0 || -b/(2*a)<0 || -b/(2*a)>1) {\n\t\t\t\t\ta=a2;\n\t\t\t\t\tb=-a-S2;\n\t\t\t\t}\n\t\t\t\tdisplaySpec[skin].positionEasingUpdate = function(ratio) {\n\t\t\t\t\tvar y=(a*ratio*ratio+b*ratio+c)*this.SCALE3D;\n\t\t\t\t\tthis.object3d.position.y=y;\n\t\t\t\t}\n\t\t\t})(skin);\n\t\t}\n\n\t\tif (!tacSound)\n\t\t\taGame.PlaySound(\"move\"+(1+Math.floor(Math.random()*4)));\n\t\t\n\t\txdv.updateGadget(\"piece#\"+piece.i,displaySpec,600,function() {\n\t\t\tEndAnim();\n\t\t});\n\n\t\tif(aMove.c!=null) {\n\t\t\tanimCount++;\n\t\t\tvar anim3d={\n\t\t\t\tpositionEasingUpdate: null,\n\t\t\t};\n\t\t\tswitch(aGame.cbView.captureAnim3d || \"movedown\") {\n\t\t\tcase 'movedown':\n\t\t\t\tanim3d.z=-2000;\n\t\t\t\tbreak;\n\t\t\tcase 'scaledown':\n\t\t\t\tanim3d.scale=[0,0,0];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tvar piece1=this.pieces[aMove.c];\n\t\t\txdv.updateGadget(\"piece#\"+piece1.i,{\n\t\t\t\t\"2d\": {\n\t\t\t\t\topacity: 0,\n\t\t\t\t},\n\t\t\t\t\"3d\": anim3d,\n\t\t\t},600,EndAnim);\n\t\t}\n\t\t\n\t\tif(aMove.cg!==undefined) {\n\t\t\tvar spec=aGame.cbVar.castle[aMove.f+\"/\"+aMove.cg];\n\t\t\tvar rookTo=spec.r[spec.r.length-1];\n\t\t\tvar piece=this.pieces[this.board[aMove.cg]];\n\t\t\tvar displaySpec=aGame.cbMakeDisplaySpecForPiece(aGame,rookTo,piece);\n\t\t\tanimCount++;\n\t\t\txdv.updateGadget(\"piece#\"+piece.i,displaySpec,600,function() {\n\t\t\t\tEndAnim();\n\t\t\t});\n\t\t}\n\t}\n\n\tView.Board.cbMoveMidZ = function(aGame,aMove,zFrom,zTo) {\n\t\treturn (zFrom+zTo)/2;\n\t}\n\n\t\n})();\n\n\n// base board management\n\n\n(function() {\n\n\t\n\tView.Game.cbBaseBoard = {\n\n\t\tTEXTURE_CANVAS_CX: 1024,\n\t\tTEXTURE_CANVAS_CY: 1024,\t\n\n\t\t// 'this' is a Game object\n\t\tdisplay: function(spec, avatar, callback) {\n\t\t\tvar $this=this;\n\t\t\tspec.getResource=avatar.getResource;\n\t\t\tspec.createGeometry.call(this,spec,function(geometry) {\n\t\t\t\tspec.createTextureImages.call($this,spec,function(images) {\n\t\t\t\t\tvar channels=['diffuse'].concat(spec.extraChannels || []);\n\t\t\t\t\tvar canvas={};\n\t\t\t\t\tchannels.forEach(function(channel) {\n\t\t\t\t\t\tvar canvas0=document.createElement('canvas');\n\t\t\t\t\t\tcanvas0.width=spec.TEXTURE_CANVAS_CX;\n\t\t\t\t\t\tcanvas0.height=spec.TEXTURE_CANVAS_CY;\n\t\t\t\t\t\tcanvas[channel]=canvas0;\n\t\t\t\t\t});\n\t\t\t\t\tspec.createMaterial.call($this,spec,canvas,function(material) {\n\t\t\t\t\t\tvar mesh=new THREE.Mesh(geometry,material);\n\t\t\t\t\t\tspec.modifyMesh.call($this,spec,mesh,function(mesh) {\n\t\t\t\t\t\t\tspec.paint.call($this,spec,canvas,images,function() {\n\t\t\t\t\t\t\t\tcallback(mesh);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t});\t\t\t\t\t\n\t\t\t\t});\n\t\t\t});\n\t\t},\n\t\t\n\t\tcreateTextureImages: function(spec,callback) {\n\t\t\tvar $this=this;\n\t\t\tvar images={};\n\t\t\tvar nbRes=0;\n\t\t\tvar texturesImg=spec.texturesImg || {};\n\t\t\tfor(var ti in texturesImg)\n\t\t\t\tnbRes++;\n\t\t\tif(nbRes==0)\n\t\t\t\tcallback(images);\n\t\t\telse\n\t\t\t\tfor(var ti in texturesImg)\n\t\t\t\t\t(function(ti) {\n\t\t\t\t\t\tspec.getResource(\"image|\"+$this.g.fullPath+texturesImg[ti],function(img){\n\t\t\t\t\t\t\timages[ti]=img;\n\t\t\t\t\t\t\tif(--nbRes==0)\n\t\t\t\t\t\t\t\tcallback(images);\n\t\t\t\t\t\t});\n\t\t\t\t\t})(ti);\n\n\t\t},\n\t\t\n\t\tcreateMaterial: function(spec,canvas,callback) {\n\t\t\tvar texBoardDiffuse = new THREE.Texture(canvas.diffuse);\n\t\t\ttexBoardDiffuse.needsUpdate = true;\n\t\t\tvar matSpec={\n\t\t\t\tspecular: '#050505',//'#222222',\n\t\t\t\t//emissive: '#333333',\n\t\t\t\tshininess: 30, //50,\n\t\t\t\tmap: texBoardDiffuse,\n\t\t\t}\n\t\t\tif(canvas.bump) {\n\t\t\t\tvar texBoardBump = new THREE.Texture(canvas.bump);\n\t\t\t\ttexBoardBump.needsUpdate = true;\n\t\t\t\tmatSpec.bumpMap = texBoardBump;\n\t\t\t\tmatSpec.bumpScale = 0.05;//0.1;\n\t\t\t}\n\t\t\tvar material=new THREE.MeshPhongMaterial(matSpec);\n\t\t\tcallback(material);\n\t\t},\n\n\t\tmodifyMesh: function(spec,mesh,callback) {\n\t\t\tcallback(mesh);\n\t\t},\n\n\t\tprePaint: function(spec,mesh,canvas,images,callback) {\n\t\t\tcallback();\n\t\t},\n\n\t\tpaint: function(spec,mesh,canvas,images,callback) {\n\t\t\tcallback();\n\t\t},\n\n\t\tpostPaint: function(spec,mesh,canvas,images,callback) {\n\t\t\tcallback();\n\t\t},\n\n\t\tpaintChannel: function(spec,ctx,images,channel) {\n\t\t\t\n\t\t},\n\t\t\n\t\tdraw: function(spec,avatar,ctx) {\n\t\t\tvar $this=this;\n\t\t\tspec.getResource=avatar.getResource;\n\t\t\t//ctx.save();\n\t\t\tspec.createTextureImages.call(this,spec,function(images) {\n\t\t\t\tspec.paintChannel.call($this,spec,ctx,images,\"diffuse\");\n\t\t\t\t//ctx.restore();\n\t\t\t});\n\t\t},\n\t\t\n\t}\n\n\t\n})();\n\n// base piece management\n\n(function() {\n\n\tvar pieces = {}, getResource;\n\n\tfunction Hash(obj) {\n\t\tvar str=JSON.stringify(obj);\n\t\tvar h=0;\n\t\tfor(var i=0;i<str.length;i++) {\n\t\t\th=(h<<5)-h+str.charCodeAt(i);\n\t\t\th&=h;\n\t\t}\n\t\treturn h;\n\t}\n\t\n\tView.Game.cbDisplayPieceFn = function(styleSpec) {\n\t\t\n\t\tvar $this=this;\n\t\tvar styleSign=Hash(styleSpec);\n\n\t\treturn function(force,options,delay){\n\t\t\tgetResource = this.getResource;\t\n\t\t\tvar m=/^piece#([0-9]+)$/.exec(this.gadget.id);\n\t\t\tif(!m)\n\t\t\t\treturn null;\n\t\t\tvar index=parseInt(m[1]);\n\t\t\tvar currentGame=$this.cbCurrentGame();\n\t\t\tif(index>=currentGame.mBoard.pieces.length)\n\t\t\t\treturn null;\n\t\t\tvar piece=currentGame.mBoard.pieces[index];\n\t\t\tvar aspect=currentGame.cbVar.pieceTypes[piece.t].aspect || currentGame.cbVar.pieceTypes[piece.t].name;\n\n\t\t\tvar key=aspect+\"_\"+styleSign+\"_\"+piece.s;\n\t\t\tvar avat=this;\n\t\t\tif(key!=this._cbKey){\n\t\t\t\tthis._cbKey=key;\n\t\t\t\tavat.options=options;\n\t\t\t\tcurrentGame.cbMakePiece(styleSpec,aspect,piece.s,function(mesh){\n\t\t\t\t\tavat.replaceMesh(mesh,avat.options,delay);\n\t\t\t\t});\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n\t\n\tView.Game.cbMakePiece = function(styleSpec,aspect,side,callback) {\n\t\t\n\t\tif(!styleSpec) {\n\t\t\tconsole.error(\"piece-view: style is not defined\");\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tfunction BuildSpec(spec,specs,aspect) {\n\t\t\tif(specs)\n\t\t\t\treturn $.extend(true,spec,specs['default'],specs[aspect]);\n\t\t\treturn {};\n\t\t}\n\t\tvar aspectSpec=BuildSpec({},styleSpec,aspect);\n\t\tif(styleSpec[side])\n\t\t\taspectSpec=BuildSpec(aspectSpec,styleSpec[side],aspect);\n\t\tvar aspectKey=Hash(aspectSpec);\n\t\tvar piece=pieces[aspectKey];\n\t\tif(Array.isArray(piece))\n\t\t\tpiece.push(callback);\n\t\telse if(!piece) {\n\t\t\tpieces[aspectKey] = [ callback ];\n\t\t\taspectSpec.loadResources.call(this,aspectSpec,function(resources) {\n\t\t\t\taspectSpec.displayPiece.call(this,aspectSpec,resources,function() {\n\t\t\t\t\tvar callbacks = pieces[aspectKey];\n\t\t\t\t\tpieces[aspectKey] = {\n\t\t\t\t\t\tgeometry: resources.geometry,\n\t\t\t\t\t\tmaterial: resources.material,\n\t\t\t\t\t}\n\t\t\t\t\tcallbacks.forEach(function(callback) {\n\t\t\t\t\t\tcallback(new THREE.Mesh(resources.geometry,resources.material));\n\t\t\t\t\t});\n\t\t\t\t});\t\t\t\t\n\t\t\t});\n\t\t} else \n\t\t\tcallback(new THREE.Mesh(piece.geometry,piece.material));\t\t\t\n\t}\n\n\tView.Game.cbClearPieces = function() {\n\t\tpieces = {};\n\t}\n\t\n\tView.Game.cbBasePieceStyle = {\n\n\t\t\"default\": {\n\t\t\tmesh: {\n\t\t\t\tjsFile: function(spec,callback) {\n\t\t\t\t\tcallback(new THREE.CubeGeometry(1,1,1),new THREE.MeshPhongMaterial({}));\n\t\t\t\t},\n\t\t\t\tsmooth: 0,\n\t\t\t\trotateZ: 0,\n\t\t\t},\n\n\t\t\tloadMesh: function(spec,callback) {\n\t\t\t\tif(typeof spec.mesh.jsFile==\"function\")\n\t\t\t\t\tspec.mesh.jsFile(spec,callback);\n\t\t\t\telse\n\t\t\t\t\tgetResource(\"smoothedfilegeo|\"+spec.mesh.smooth+\"|\"+this.g.fullPath+spec.mesh.jsFile,callback);\n\t\t\t},\n\n\t\t\tloadImages: function(spec,callback) {\n\t\t\t\tvar $this=this;\n\t\t\t\tvar nbRes=1;\n\t\t\t\tvar images={};\n\t\t\t\tfunction Loaded() {\n\t\t\t\t\tif(--nbRes==0)\n\t\t\t\t\t\tcallback(images);\n\t\t\t\t}\n\t\t\t\tfor(var mat in spec.materials) {\n\t\t\t\t\tvar channels=spec.materials[mat].channels;\n\t\t\t\t\tfor(var channel in channels) {\n\t\t\t\t\t\tif(channels[channel].texturesImg)\n\t\t\t\t\t\t\tfor(var img in channels[channel].texturesImg)\n\t\t\t\t\t\t\t\t(function(img,url) {\n\t\t\t\t\t\t\t\t\tnbRes++;\n\t\t\t\t\t\t\t\t\tgetResource(\"image|\"+$this.g.fullPath+url,function(image) {\n\t\t\t\t\t\t\t\t\t\timages[img]=image;\n\t\t\t\t\t\t\t\t\t\tLoaded();\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t})(img,channels[channel].texturesImg[img]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tLoaded();\n\t\t\t},\n\t\t\t\n\t\t\tloadResources: function(spec,callback) {\n\t\t\t\tvar nbRes=2;\n\t\t\t\tvar images, geometry,materials;\n\t\t\t\t\n\t\t\t\tfunction Loaded() {\n\t\t\t\t\tif(--nbRes==0)\n\t\t\t\t\t\tcallback({\n\t\t\t\t\t\t\tgeometry: geometry,\n\t\t\t\t\t\t\timages: images,\n\t\t\t\t\t\t\ttextures: {},\n\t\t\t\t\t\t\tloadedMaterials: materials,\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tspec.loadMesh.call(this,spec,function(geo,mats) {\n\t\t\t\t\tif(!geo._cbZRotated) {\n\t\t\t\t\t\tvar matrix = new THREE.Matrix4();\n\t\t\t\t\t\tmatrix.makeRotationY(spec.mesh.rotateZ*Math.PI/180)\n\t\t\t\t\t\tgeo.applyMatrix(matrix);\n\t\t\t\t\t\tgeo._cbZRotated=true;\n\t\t\t\t\t}\n\t\t\t\t\tgeometry=geo;\n\t\t\t\t\tmaterials=mats;\n\t\t\t\t\t//materials=mats;\n\t\t\t\t\tLoaded();\n\t\t\t\t});\n\t\t\t\tspec.loadImages.call(this,spec,function(imgs) {\n\t\t\t\t\timages=imgs;\n\t\t\t\t\tLoaded();\n\t\t\t\t});\n\t\t\t},\n\t\t\t\t\t\t\n\t\t\tdisplayPiece: function(spec,resources,callback) {\n\t\t\t\tspec.makeMaterials.call(this,spec,resources);\n\t\t\t\tcallback();\n\t\t\t},\n\t\t\t\n\t\t\tpaintTextureImageClip: function(spec,ctx,material,channel,channelData,imgKey,image,clip,resources) {\n\t\t\t\tvar cx=ctx.canvas.width;\n\t\t\t\tvar cy=ctx.canvas.height;\n\t\t\t\tif(channelData.patternFill && channelData.patternFill[imgKey]) {\n\t\t\t\t\tvar fillKey=channelData.patternFill[imgKey];\t\n\t\t\t\t\tctx.save();\n\t\t\t\t\t// use a tmp canvas for painting colored patterns with shape used as mask (alpha channel needed)\n\t\t\t\t\tvar tmpCanvas = document.createElement('canvas');\n\t\t\t\t\ttmpCanvas.width=cx;\n\t\t\t\t\ttmpCanvas.height=cy;\n\t\t\t\t\tctxTmp=tmpCanvas.getContext('2d');\n\t\t\t        ctxTmp.fillStyle=fillKey;\n\t\t\t        ctxTmp.fillRect(0,0,cx,cy);\n\t\t\t        ctxTmp.globalCompositeOperation='destination-in';\n\t\t\t\t\tctxTmp.drawImage(image,clip.x,clip.y,clip.cx,clip.cy,0,0,cx,cy);\n\t\t\t\t\t// now paste the result in diffuse canvas\n\t\t\t\t\tctx.drawImage(tmpCanvas,0,0,cx,cy,0,0,cx,cy);\n\t\t\t\t\tctx.restore();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tctx.drawImage(image,clip.x,clip.y,clip.cx,clip.cy,0,0,cx,cy);\t\t\t\t\n\t\t\t},\n\t\t\t\n\t\t\tpaintTextureImage: function(spec,ctx,material,channel,channelData,imgKey,image,resources) {\n\t\t\t\tvar clip;\n\t\t\t\tif(channelData.clipping && channelData.clipping[imgKey])\n\t\t\t\t\tclip=channelData.clipping[imgKey];\n\t\t\t\telse\n\t\t\t\t\tclip={\n\t\t\t\t\t\tx: 0,\n\t\t\t\t\t\ty: 0,\n\t\t\t\t\t\tcx: image.width,\n\t\t\t\t\t\tcy: image.height\n\t\t\t\t\t};\n\t\t\t\tspec.paintTextureImageClip.call(this,spec,ctx,material,channel,channelData,imgKey,image,clip,resources);\n\t\t\t},\n\t\t\t\n\t\t\tpaintTexture: function(spec,ctx,material,channel,resources) {\n\t\t\t\t//console.log(\"paintTexture\",channel,\"for\",spec.mesh.jsFile);\n\t\t\t\tvar channelData=spec.materials[material].channels[channel];\n\t\t\t\tfor(var img in channelData.texturesImg) {\n\t\t\t\t\tvar image=resources.images[img];\n\t\t\t\t\tspec.paintTextureImage.call(this,spec,ctx,material,channel,channelData,img,image,resources);\n\t\t\t\t}\n\t\t\t},\n\t\t\t\n\t\t\tmakeMaterialTextures: function(spec,material,resources) {\n\t\t    \tfor (var chan in spec.materials[material].channels) {\n\t\t    \t\tvar channel = spec.materials[material].channels[chan];\n\t\t    \t\tvar canvas = document.createElement('canvas');\n\t\t    \t\tcanvas.width=channel.size.cx;\n\t\t    \t\tcanvas.height=channel.size.cy;\n\t\t    \t\tvar ctx = canvas.getContext('2d');\n\t\t    \t\tspec.paintTexture.call(this,spec,ctx,material,chan,resources);\n\t\t    \t\tvar texture =  new THREE.Texture(canvas);\n\t\t    \t\ttexture.needsUpdate = true;\n\t\t    \t\tresources.textures[material][chan]=texture;\n\t    \t\t}\n\t\t\t},\n\n\t\t\tmakeMaterials: function(spec,resources) {\n\t\t\t\tresources.textures={};\n\t\t    \tfor (var m in spec.materials) {\n\t\t    \t\tresources.textures[m]={}\n\t\t    \t\tspec.makeMaterialTextures.call(this,spec,m,resources)\n\t    \t\t\tspec.makeMaterial.call(this,spec,m,resources);\n\t\t    \t}\n\t\t\t},\n\t\t}\t\t\n\t}\n\t\n\tView.Game.cbTokenPieceStyle3D = $.extend(true,{},View.Game.cbBasePieceStyle,{\n\n\t\t\"default\": {\n\n\t\t\tmakeMaterials: function(spec,resources) {\n\t\t\t\tresources.textures={};\n\t\t    \tfor (var m in spec.materials) {\n\t\t    \t\tresources.textures[m]={}\n\t\t    \t\tspec.makeMaterialTextures.call(this,spec,m,resources)\n\t\t    \t}\n\n\t\t    \tvar pieceMaterials=[];\n\t    \t\tfor (var mat in resources.loadedMaterials){\n\t    \t\t\tvar newMat=resources.loadedMaterials[mat].clone();\t    \t\t\t\n\t    \t\t\tvar matName=newMat.name;\n\t    \t\t\tif (spec.materials[matName]){\n\t\t    \t\t\t$.extend(true,newMat,spec.materials[matName].params);\n\t\t\t\t\t\tfor (var chan in spec.materials[matName].channels) {\n\t\t\t\t\t\t\tswitch (chan){\n\t\t\t\t\t\t\tcase 'diffuse':\n\t\t\t\t\t\t\t\tnewMat.map = resources.textures[matName][chan];\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'bump':\n\t\t\t\t\t\t\t\tnewMat.bumpMap = resources.textures[matName][chan];\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t    \t\t\t}\n\t    \t\t\tpieceMaterials.push(newMat);\n\t    \t\t}\n\t\t\t\tvar pieceMat = new THREE.MultiMaterial( pieceMaterials );\n\t\t\t\tresources.material=pieceMat;\n\t\t\t},\n\n\t\t\t\n\t\t},\n\t});\n\n\tView.Game.cbUniformPieceStyle3D = $.extend(true,{},View.Game.cbBasePieceStyle,{\n\n\t\t\"default\": {\n\n\t\t\tmakeMaterial: function(spec,material,resources) {\n\t    \t\t/*var shader = THREE.ShaderLib[ \"normalmap\" ];\n\t\t\t\tvar uniforms = THREE.UniformsUtils.clone( shader.uniforms );\n\t    \t\tvar phongParams = spec.materials[material].params;\n\t\t\t\tfor (var chan in spec.materials[material].channels) {\n\t\t\t\t\tvar chanParams=spec.materials[material].channels[chan];\n\t\t\t\t\tswitch (chan) {\n\t\t\t\t\tcase 'diffuse':\n\t\t\t\t\t\tphongParams.map = resources.textures[material][chan];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'normal':                        \n\t\t\t\t\t\tuniforms[ \"tNormal\" ].value = resources.textures[material][chan];\n\t\t\t\t\t\tuniforms[ \"uNormalScale\" ].value.y = chanParams.normalScale || 1;\n\t\t\t\t\t\tphongParams.normalMap = uniforms[ \"tNormal\" ].value ;\n\t\t\t\t\t\tphongParams.normalScale = uniforms[ \"uNormalScale\" ].value ;                        \n\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tuniforms[ \"enableAO\" ].value = true;\t\t\t\t\t\n\t\t\t\t//uniforms[ \"tNormal\" ].value = texNorm;\n\t\t\t\t//uniforms[ \"uNormalScale\" ].value.y = cbPieceType.normalScale;\n\t\t\t\tif(uniforms[ \"uShininess\" ] !== undefined)\n\t\t\t\t\tuniforms[ \"uShininess\" ].value = spec.materials[material].params['shininess'] || 100; */\n\n\t\t\t\tvar phongParams = spec.materials[material].params ;\n\t\t\t\tphongParams.map = resources.textures[material]['diffuse'] ;\n\t\t\t\tphongParams.normalMap = resources.textures[material]['normal'] ;\n\t\t\t\tvar ns = spec.materials[material].channels['normal'].normalScale || 1;\n\t\t\t\tphongParams.normalScale = new THREE.Vector2( ns , ns ) ;\n\n\t\t\t\tvar pieceMat = new THREE.MeshPhongMaterial( phongParams );\n\t\t\t\t\n\t\t\t\tresources.material=pieceMat;\n\t\t\t\t\n\t\t\t\tresources.geometry.mergeVertices()\n\t\t\t\tresources.geometry.computeVertexNormals(); // needed in normals not exported in js file!\n\n\t\t\t},\n\n\t\t\t\n\t\t}\n\t\t\n\t});\n\t\n\tView.Game.cbPhongPieceStyle3D = $.extend(true,{},View.Game.cbBasePieceStyle,{\n\n\t\t\"default\": {\n\n\t\t\tphongProperties : {\n\t\t\t\tcolor: \"#ffffff\",\n\t\t\t\tshininess: 300,\n\t\t\t\tspecular: \"#ffffff\",\n\t\t\t\temissive: \"#222222\",\n\t\t\t\tshading: typeof THREE!=\"undefined\"?THREE.FlatShading:0,\n\t\t\t},\n\t\t\tmakeMaterials: function(spec,resources) {\n\t\t\t\tvar pieceMat = new THREE.MeshPhongMaterial( spec.phongProperties );\n\t\t\t\tresources.material=pieceMat;\n\t\t\t},\n\t\t}\n\t\t\n\t});\n\t\n})();\n\n\n\n"],"file":"demi-chess-view.js"}