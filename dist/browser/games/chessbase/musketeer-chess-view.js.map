{"version":3,"names":[],"mappings":"","sources":["musketeer-view.js"],"sourcesContent":["(function() {\n\t\n\t\n\t// Reducing the promo frame which was overflowing the board screen\n\tView.Game.cbPromoSize = 1500;\n\t\n\tView.Game.cbCreatePromo = function(xdv) {\n\t\txdv.createGadget(\"promo-board\",{\n\t\t\tbase: {\n\t\t\t\ttype: \"element\",\n\t\t\t\tx: 0,\n\t\t\t\ty: 0,\n\t\t\t\twidth: 1500,\n\t\t\t\theight: 1500,\n\t\t\t\tz: 108,\n\t\t\t\tcss: {\n\t\t\t\t\t\"background-color\": \"white\",\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t\txdv.createGadget(\"promo-cancel\",{\n\t\t\tbase: {\n\t\t\t\ttype: \"image\",\n\t\t\t\tfile: this.g.fullPath+\"/res/images/cancel.png\",\n\t\t\t\tx: 0,\n\t\t\t\ty: 0,\n\t\t\t\twidth: 800,\n\t\t\t\theight: 800,\n\t\t\t\tz: 109,\n\t\t\t},\n\t\t});\n\t\tfor(var i=0;i<this.g.pTypes.length;i++) {\n\t\t\txdv.createGadget(\"promo#\"+i,{\n\t\t\t\tbase: {\n\t\t\t\t\ty: 0,\n\t\t\t\t\tz: 109,\n\t\t\t\t\ttype: \"sprite\",\n\t\t\t\t\tclipwidth: 100,\n\t\t\t\t\tclipheight: 100,\n\t\t\t\t\twidth: 1200,\n\t\t\t\t\theight: 1200,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t}\n\t\n\t// needed for new canvas for repainting bicolor pieces parts\n\tvar CANVAS_SIZE = 512 ;\n\t\n\t// musketeer geometry, rows from 0 to 9\n\tvar geometry=Model.Game.cbBoardGeometryGrid(8,10);\n\t\n\t// positions of selected pieces\n\tvar startPosW1 = 31 ;\n\tvar startPosW2 = 39 ;\n\tvar startPosB1 = 40 ;\n\tvar startPosB2 = 48 ;\n\t\n\tfunction colOffsetX(pos) {return geometry.C(pos)-geometry.width/2+0.5;} \n\tfunction rowOffsetY(pos) {return -geometry.R(pos)+geometry.width/2+0.5;} \n\t\t\n\t// 3d bicolor pieces texture painting. Using 2 materials named \"mat0\" and \"mat1\"\t\n\tfunction paint2PartsTextureImageClip(side,spec,ctx,material,channel,channelData,imgKey,image,clip,resources) {\n\t\t\t\t\n\t\t\n\t\tvar cx=ctx.canvas.width;\n\t\tvar cy=ctx.canvas.height;\n\t\t\n\t\tif ( ((side == \"1\") && (material == \"mat0\")) || ((side == \"-1\") && (material == \"mat1\")) ) {\n\t\t\t// white\n\t\t\tif(channelData.patternFill && channelData.patternFill[imgKey]) {\n\t\t\t\tvar fillKey=channelData.patternFill[imgKey];\t\n\t\t\t\tctx.save();\n\t\t\t\t// use a tmp canvas for painting colored patterns with shape used as mask (alpha channel needed)\n\t\t\t\tvar tmpCanvas = document.createElement('canvas');\n\t\t\t\ttmpCanvas.width=cx;\n\t\t\t\ttmpCanvas.height=cy;\n\t\t\t\tctxTmp=tmpCanvas.getContext('2d');\n\t\t        ctxTmp.fillStyle=fillKey;\n\t\t        ctxTmp.fillRect(0,0,cx,cy);\n\t\t        ctxTmp.globalCompositeOperation='destination-in';\n\t\t\t\tctxTmp.drawImage(image,clip.x,clip.y,clip.cx,clip.cy,0,0,cx,cy);\n\t\t\t\t// now paste the result in diffuse canvas\n\t\t\t\tctx.drawImage(tmpCanvas,0,0,cx,cy,0,0,cx,cy);\n\t\t\t\tctx.restore();\n\t\t\t}\n\t\t\telse{\t\n\t\t\t\tctx.drawImage(image,clip.x,clip.y,clip.cx,clip.cy,0,0,cx,cy);\t\t\t\n\t\t\t}\n\t\t}else{\n\t\t\t// black\t\n\t\t\tif(channel==\"diffuse\") {\n\t\t\t\tctx.globalCompositeOperation = 'normal';\n\t\t\t\tctx.drawImage(image,clip.x,clip.y,clip.cx,clip.cy,0,0,cx,cy);\n\t\t\t\tctx.globalCompositeOperation = 'multiply';\n\t\t\t\tctx.drawImage(image,clip.x,clip.y,clip.cx,clip.cy,0,0,cx,cy);\n\t\t\t\tctx.drawImage(image,clip.x,clip.y,clip.cx,clip.cy,0,0,cx,cy);\n\t\t\t\tctx.globalCompositeOperation = 'hue';\n\t\t\t\tctx.fillStyle='rgba(0,0,0,0.7)';\n\t\t\t\tctx.fillRect(0,0,CANVAS_SIZE,CANVAS_SIZE);\n\t\t\t} else\n\t\t\t\tctx.drawImage(image,clip.x,clip.y,clip.cx,clip.cy,0,0,cx,cy);\t\t\t\n\t\t}\n\n\t}\n\t\n\tblackPhongParams = {\n\t\tspecular: 0x222222,\n\t\tshininess : 100  \n\t};\n\ttextureCanvasSz = { cx : CANVAS_SIZE , cy : CANVAS_SIZE } ;\n\t\n\t// extending fairy pieces with musketeer new pieces\n\tView.Game.cbFairyMusketeerPieceStyle3D = $.extend(true,{},View.Game.cbFairyPieceStyle3D,{\n\t\t/* \n\t\t * \n\t\t * blender note: for 2 materials pieces, generate one single piece , parts are defined by assigned materials  \n\t\t *  \n\t\t * \n\t\t * \n\t\t */\n\t\t\n\t\t\"default\":{\n\t\t\t\n\t\t\t// to take into account the need of multi material feature (MultiMaterial)\n\t\t\tmakeMaterial: function(spec,resources) {\n\t\t\t\t\n\t    \t\t\n\t\t\t\tvar pieceMaterials=[];\n\t\t\t\t\n\t\t\t\tfor (var material in spec.materials) {\n\n\t\t\t\t\tvar phongParams = spec.materials[material].params ;\n\t\t\t\t\tphongParams.map = resources.textures[material]['diffuse'] ;\n\t\t\t\t\tphongParams.normalMap = resources.textures[material]['normal'] ;\n\t\t\t\t\tvar ns = spec.materials[material].channels['normal'].normalScale || 1;\n\t\t\t\t\tphongParams.normalScale = new THREE.Vector2( ns , ns ) ;\n\t\t\t\t\t\n\t\t\t\t\tvar newMat = new THREE.MeshPhongMaterial( phongParams );\n\t\t\t\t\tpieceMaterials.push(newMat);\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tresources.material=new THREE.MultiMaterial(pieceMaterials);\n\t\t\t\t\n\t\t\t\tresources.geometry.mergeVertices()\n\t\t\t\tresources.geometry.computeVertexNormals(); // needed in normals not exported in js file!\n\n\n\t\t\t},\n\t\t\t\n\t\t\tmakeMaterials: function(spec,resources) {\n\t\t\t\tresources.textures={};\n\t\t    \tfor (var m in spec.materials) {\n\t\t    \t\tresources.textures[m]={}\n\t\t    \t\tspec.makeMaterialTextures.call(this,spec,m,resources)\n\t\t    \t}\n    \t\t\tspec.makeMaterial.call(this,spec,resources);\n\t\t\t},\t\t\t\n\t\t},\t\t\n\t\t\"-1\":{\n\t\t\t'default': {\n\t\t\t\tmaterials:{\n\t\t\t\t\tmat0:{\t\t\t\t\t\t\n\t\t\t\t\t\tparams : {\n\t\t\t\t\t\t\tspecular: 0x050505,\n\t\t\t\t\t\t\tshininess : 100 , \n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tpaintTextureImageClip: function(spec,ctx,material,channel,channelData,imgKey,image,clip,resources) {\n\t\t\t\t\tpaint2PartsTextureImageClip(\"-1\",spec,ctx,material,channel,channelData,imgKey,image,clip,resources);\n\t\t\t\t},\n\t\t\t},\n\t\t},\t\t\t\t\n\t\t\"1\":{\n\t\t\t'default': {\n\t\t\t\t\tpaintTextureImageClip: function(spec,ctx,material,channel,channelData,imgKey,image,clip,resources) {\n\t\t\t\t\t\tpaint2PartsTextureImageClip(\"1\",spec,ctx,material,channel,channelData,imgKey,image,clip,resources);\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t\t\n\t\t\t\"fr-leopard\": {\n\t\t\t\tmesh: { \n\t\t\t\t\tjsFile:\"/res/musketeer/leopard.js\" \n\t\t\t\t},\n\t\n\t\t\t\tmaterials: {\n\t\t\t\t\tmat0: {\n\t\t\t\t\t\tchannels: {\n\t\t\t\t\t\t\tdiffuse: {\n\t\t\t\t\t\t\t\ttexturesImg: {\n\t\t\t\t\t\t\t\t\tdiffImg : \"/res/musketeer/leopard-diffusemap.jpg\",\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tnormal: {\n\t\t\t\t\t\t\t\ttexturesImg: {\n\t\t\t\t\t\t\t\t\tnormalImg: \"/res/musketeer/leopard-normalmap.jpg\", \n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t \n\t\t\t\t}\n\t\t\t},\n\t\t\n\t\t\t\"fr-fortress\": {\n\t\t\t\tmesh: { \n\t\t\t\t\tjsFile:\"/res/musketeer/fortress.js\" \n\t\t\t\t},\n\t\n\t\t\t\tmaterials: {\n\t\t\t\t\tmat0: {\n\t\t\t\t\t\tchannels: {\n\t\t\t\t\t\t\tdiffuse: {\n\t\t\t\t\t\t\t\ttexturesImg: {\n\t\t\t\t\t\t\t\t\tdiffImg : \"/res/musketeer/fortress-diffusemap.jpg\",\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tnormal: {\n\t\t\t\t\t\t\t\ttexturesImg: {\n\t\t\t\t\t\t\t\t\tnormalImg: \"/res/musketeer/fortress-normalmap.jpg\", \n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t \n\t\t\t\t}\n\t\t\t},\n\t\t\n\t\t\t\"fr-mdd\": {\n\t\t\t\tmesh: { \n\t\t\t\t\tjsFile:\"/res/musketeer/dragon-musketeer.js\" \n\t\t\t\t},\n\t\n\t\t\t\tmaterials: {\n\t\t\t\t\tmat0: {\n\t\t\t\t\t\tchannels: {\n\t\t\t\t\t\t\tdiffuse: {\n\t\t\t\t\t\t\t\ttexturesImg: {\n\t\t\t\t\t\t\t\t\tdiffImg : \"/res/musketeer/dragon-musketeer-diffusemap.jpg\",\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tnormal: {\n\t\t\t\t\t\t\t\ttexturesImg: {\n\t\t\t\t\t\t\t\t\tnormalImg: \"/res/musketeer/dragon-musketeer-normalmap.jpg\", \n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t \n\t\t\t\t}\n\t\t\t},\n\t\t\n\t\t\t\"fr-spider\": {\n\t\t\t\tmesh: { \n\t\t\t\t\tjsFile:\"/res/musketeer/spider.js\" \n\t\t\t\t},\n\t\n\t\t\t\tmaterials: {\n\t\t\t\t\tmat0: {\n\t\t\t\t\t\tchannels: {\n\t\t\t\t\t\t\tdiffuse: {\n\t\t\t\t\t\t\t\ttexturesImg: {\n\t\t\t\t\t\t\t\t\tdiffImg : \"/res/musketeer/spider-diffusemap.jpg\",\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tnormal: {\n\t\t\t\t\t\t\t\ttexturesImg: {\n\t\t\t\t\t\t\t\t\tnormalImg: \"/res/musketeer/spider-normalmap.jpg\", \n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t \n\t\t\t\t}\n\t\t\t},\n\t\t\t\t\n\t});\n\t\n\tView.Game.cbDefineView = function() {\n\n\t\tvar musketeerBoardDelta = {\n\t\t\t//notationMode: \"in\",\n\t\t\t//notationDebug: true,\n\n\t\t\t// specific musketeer board painting\n\t\t\tpaintLines:function(spec,ctx,images,channel) {\n\t\t\t\tvar cSize = this.cbCSize(spec);\n\t\t\t\tctx.strokeStyle = \"#000000\";\n\t\t\t\tctx.lineWidth = 40;\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.moveTo(-cSize.cx*4,-cSize.cy*5);\n\t\t\t\tctx.lineTo(cSize.cx*4,-cSize.cy*5);\n\t\t\t\tctx.lineTo(cSize.cx*4,cSize.cy*5);\n\t\t\t\tctx.lineTo(-cSize.cx*4,cSize.cy*5);\n\t\t\t\tctx.closePath();\n\t\t\t\tctx.stroke();\n\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.moveTo(-cSize.cx*4,-cSize.cy*4);\n\t\t\t\tctx.lineTo(cSize.cx*4,-cSize.cy*4);\n\t\t\t\tctx.closePath();\n\t\t\t\tctx.stroke();\n\t\t\t\t\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.moveTo(-cSize.cx*4,cSize.cy*4);\n\t\t\t\tctx.lineTo(cSize.cx*4,cSize.cy*4);\n\t\t\t\tctx.closePath();\t\t\t\t\n\t\t\t\tctx.stroke();\n\t\t\t\t\n\t\t\t},\n            \n            paintOutNotation: function(spec,ctx,channel) {\n                var NBROWS=this.cbVar.geometry.height;\n\t\t        var NBCOLS=this.cbVar.geometry.width;\n\n                var cSize = this.cbCSize(spec);\n                for (var row = 0; row < NBROWS; row++) {\n                    var displayedRow = NBROWS - row - 1;\n                    if(this.mViewAs<0)\n                        displayedRow=row;\n                    var x = -(NBCOLS/2 + spec.margins.x/2) * cSize.cx;\n                    var y = (row-NBROWS/2+.5) * cSize.cy;\n                    ctx.fillText(displayedRow, x, y);\t\n                }\n                for (var col = 0; col < NBCOLS; col++) {\n                    var displayedCol=col;\n                    if(this.mViewAs<0)\n                        displayedCol = NBCOLS - col -1;\n                    var x = (col-NBCOLS/2+.5) * cSize.cx;\n                    var y = (NBROWS/2 + spec.margins.y/2) * cSize.cy;\n                    ctx.fillText(String.fromCharCode(97 + displayedCol), x , y);\n                }\n            },            \n\t\t};\t\t\n\t\t\n\t\tmusketeerBoardDelta3d = $.extend(true,{},musketeerBoardDelta,\n\t\t\t\t{\n\t\t\t\t\t'colorFill' : {\n\t\t\t\t\t\t\".\": \"rgba(160,150,150,0.9)\", // white cells\n\t\t\t\t\t\t\"#\": \"rgba(0,0,0,1)\", // \"black\" cells\n\t\t\t\t\t\t\" \": \"rgba(160,150,150,0.5)\",\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t);\n\n\t\tmusketeerBoardDelta2d = $.extend(true,{},musketeerBoardDelta, \n\t\t\t{\n\t\t\t\t'colorFill' : {\n\t\t\t\t\t\".\": \"#F1D9B3\", // \"white\" cells\n\t\t\t\t\t\"#\": \"#C7885D\", // \"black\" cells\n\t\t\t\t\t\" \": \"rgba(241,217,179,.5)\",\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t\t\n\t\tvar musketeerBoard3d = $.extend(true,{},this.cbGridBoardClassic3DMargin,musketeerBoardDelta3d);\n\t\tvar musketeerBoard2d = $.extend(true,{},this.cbGridBoardClassic2DMargin,musketeerBoardDelta2d);\n\t\tvar musketeerIconesOffset= 1900 ; // in case we use the resource with all icons in a single file, 1 line for whites, 1 line for blacks\n\t\treturn {\n\t\t\tcoords: {\n\t\t\t\t\"2d\": this.cbGridBoard.coordsFn.call(this,musketeerBoard2d),\n\t\t\t\t\"3d\": this.cbGridBoard.coordsFn.call(this,musketeerBoard3d),\n\t\t\t},\n\t\t\tboardLayout: [\n\t     \t\t\"        \",\n\t      \t\t\".#.#.#.#\",\n\t     \t\t\"#.#.#.#.\",\n\t      \t\t\".#.#.#.#\",\n\t     \t\t\"#.#.#.#.\",\n\t      \t\t\".#.#.#.#\",\n\t     \t\t\"#.#.#.#.\",\n\t      \t\t\".#.#.#.#\",\n\t     \t\t\"#.#.#.#.\",\n\t      \t\t\"        \",\n\t\t\t],\n\t\t\tboard: {\n\t\t\t\t\"2d\": {\n\t\t\t\t\tdraw: this.cbDrawBoardFn(musketeerBoard2d),\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t},\n\t\t\t\t\"3d\": {\n\t\t\t\t\tdisplay: this.cbDisplayBoardFn(musketeerBoard3d),\t\t\t\t\t\n\t\t\t\t},\n\t\t\t},\n\t\t\tclicker: {\n\t\t\t\t\"2d\": {\n\t\t\t\t\twidth: 1100,\n\t\t\t\t\theight: 1100,\n\t\t\t\t},\n\t\t\t\t\"3d\": {\n\t\t\t\t\tscale: [.75,.75,.75],\n\t\t\t\t},\n\t\t\t},\n\t\t\tpieces: this.cbFairyPieceStyle({\n\t\t\t\t\"fr-pawn\":{ // overload so that pawn uses same resource than musketer pieces to avoids an update bug at promotion time\t\t\t\n\t\t\t\t\t\"2d\": {\n\t\t\t\t\t\tfile: this.mViewOptions.fullPath + \"/res/musketeer/wikipedia-fairy-musketeer-all-sprites.png\",\n\t\t\t\t\t\tclipx : 0,\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"default\": {\n\t\t\t\t\t\"3d\": {\n\t\t\t\t\t\tscale: [.5,.5,.5],\n\t\t\t\t\t\tdisplay: this.cbDisplayPieceFn(this.cbFairyMusketeerPieceStyle3D)\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"fr-leopard\" :{\n\t\t\t\t\t\t\"2d\": {\n\t\t\t\t\t\t\tfile: this.mViewOptions.fullPath + \"/res/musketeer/wikipedia-fairy-musketeer-all-sprites.png\",\n\t\t\t\t\t\t\tclipx : 1800+musketeerIconesOffset,\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"fr-fortress\" :{\n\t\t\t\t\t\t\"2d\": {\n\t\t\t\t\t\t\tfile: this.mViewOptions.fullPath + \"/res/musketeer/wikipedia-fairy-musketeer-all-sprites.png\",\n\t\t\t\t\t\t\tclipx : 1200+musketeerIconesOffset,\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"fr-mdd\" :{\n\t\t\t\t\t\t\"2d\": {\n\t\t\t\t\t\t\tfile: this.mViewOptions.fullPath + \"/res/musketeer/wikipedia-fairy-musketeer-all-sprites.png\",\n\t\t\t\t\t\t\tclipx : 0+musketeerIconesOffset,\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"fr-spider\" :{\n\t\t\t\t\t\t\"2d\": {\n\t\t\t\t\t\t\tfile: this.mViewOptions.fullPath + \"/res/musketeer/wikipedia-fairy-musketeer-all-sprites.png\",\n\t\t\t\t\t\t\tclipx : 600+musketeerIconesOffset,\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\t\t}),\n\t\t};\n\t}\n\n\t/* Make the knight jump when moving */\n\tView.Board.cbMoveMidZ = function(aGame,aMove,zFrom,zTo) {\n\t\tif(this.setupState===undefined || this.setupState!=\"done\")\n\t\t\treturn Math.max(zFrom,zTo)+3000;\n\t\t\t\t\t\n\t\tif((\"_N_Le_Fo_Dr_Sp_U_H_E_Ch_Ar_Ca_\".indexOf(\"_\"+aMove.a+\"_\")>=0) && (aGame.g.distGraph[aMove.f][aMove.t]>1))\n\t\t\treturn Math.max(zFrom,zTo)+2000;\n\t\telse\n\t\t\treturn (zFrom+zTo)/2;\n\t}\n\t/*\n\t * View.Board.xdDisplay overriding to prevent displaying black xtra pieces before setup\n\t */\n\tvar SuperViewBoardxdDisplay = View.Board.xdDisplay;\n\tView.Board.xdDisplay = function(xdv, aGame) {\n\t\tvar size = 1060; \n\t\tSuperViewBoardxdDisplay.apply(this,arguments);\n        xdv.updateGadget(\"selection-posW1\",{\n\t\t\t\"base\":{\n\t\t\t\tvisible: (this.setupState===undefined),\n\t\t\t\tx: aGame.mViewAs > 0 ? size*colOffsetX(startPosW1) : -size*colOffsetX(startPosW1),\n\t\t\t\ty: aGame.mViewAs > 0 ? size*rowOffsetY(startPosW1) : -size*rowOffsetY(startPosW1), \n\t\t\t}\n\t\t});\n        xdv.updateGadget(\"selection-posB1\",{\n\t\t\t\"base\":{\n\t\t\t\tvisible: (this.setupState===undefined) ,\n\t\t\t\tx: aGame.mViewAs > 0 ? size*colOffsetX(startPosB1) : -size*colOffsetX(startPosB1),\n\t\t\t\ty: aGame.mViewAs > 0 ? size*rowOffsetY(startPosB1) : -size*rowOffsetY(startPosB1), \n\t\t\t}\n\t\t});\n        xdv.updateGadget(\"selection-posW2\",{\n\t\t\t\"base\":{\n\t\t\t\tvisible: ((this.setupState===undefined) || (this.setupState == \"setup1_0\")),\n\t\t\t\tx: aGame.mViewAs > 0 ? size*colOffsetX(startPosW2) : -size*colOffsetX(startPosW2),\n\t\t\t\ty: aGame.mViewAs > 0 ? size*rowOffsetY(startPosW2) : -size*rowOffsetY(startPosW2), \t\t\t\t\n\t\t\t}\n\t\t});\n        xdv.updateGadget(\"selection-posB2\",{\n\t\t\t\"base\":{\n\t\t\t\tvisible: ((this.setupState===undefined) || (this.setupState == \"setup1_0\")) ,\n\t\t\t\tx: aGame.mViewAs > 0 ? size*colOffsetX(startPosB2) : -size*colOffsetX(startPosB2),\n\t\t\t\ty: aGame.mViewAs > 0 ? size*rowOffsetY(startPosB2) : -size*rowOffsetY(startPosB2), \n\t\t\t}\n\t\t});\n\t\t\n\t\txdv.updateGadget(\"selection-board\",{\n\t\t\t\"base\":{\n\t\t\t\tvisible: ((this.setupState===undefined) || (this.setupState != \"done\")) \n\t\t\t}\n\t\t});\n\t\txdv.updateGadget(\"board\",{\n\t\t\t\"base\":{\n\t\t\t\tvisible: !((this.setupState===undefined) || (this.setupState == \"setup1_0\")) \n\t\t\t}\n\t\t});\n\n\t\tif(this.setupState===undefined || this.setupState==\"setup1_0\") {\n\t\t\t\n\t\t\tfor (var idx in this.pieces){\n\t\t\t\tvar piece = this.pieces[idx];\n\t\t\t\tvar abbrev = aGame.g.pTypes[piece.t].abbrev ;\n\t\t\t\tif (\"KQRBNP\".indexOf(abbrev)>=0){\n\t\t\t\t\txdv.updateGadget(\"piece#\"+idx,{\n\t\t\t\t\t\t\"base\":{\n\t\t\t\t\t\t\topacity: 0.0, \n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"3d\":{\n\t\t\t\t\t\t\tscale: [0.0001,0.0001,0.0001] // do not use 0, it leads to Matrix errors\n\t\t\t\t\t\t}\n\t\t\t\t\t});\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(this.setupState==\"setup2_0\" || this.setupState==\"setup2_1\" || this.setupState==\"setup2_2\" || this.setupState==\"setup2_3\") {\n\t\t\t\n\t\t\tfor (var idx in this.pieces){\n\t\t\t\tvar piece = this.pieces[idx];\n\t\t\t\tvar abbrev = aGame.g.pTypes[piece.t].abbrev ;\n\t\t\t\tif (\"KQRBNP\".indexOf(abbrev)>=0){\n\t\t\t\t\txdv.updateGadget(\"piece#\"+idx,{\n\t\t\t\t\t\t\"base\":{\n\t\t\t\t\t\t\topacity: 0.5, \n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"3d\":{\n\t\t\t\t\t\t\tscale: [0.2,0.2,0.2]\n\t\t\t\t\t\t}\n\t\t\t\t\t});\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\t\t\n\t\n\t/*var SuperViewGamexdBuildScene = View.Game.xdBuildScene ;\n\tView.Game.xdBuildScene = function(xdv) {\n\t\tSuperViewGamexdBuildScene.apply(this,arguments);\n\t\tvar $this = this ;\n\t\txdv.updateGadget(\"selection-board\",{\n\t\t\t\"base\":{\n\t\t\t\tvisible: (($this.mBoard.setupState===undefined) || ($this.mBoard.setupState != \"done\")) \n\t\t\t}\n\t\t});\n\t}*/\n\t\n\n\t/*\n\t * View.Game.xdInit overriding to create initial setup gadgets \n\t */\n\tvar SuperViewGameXdInit = View.Game.xdInit;\n\tView.Game.xdInit = function(xdv) {\n\t\tvar size = 1060;\n\t\tvar $this=this;\n\t\tSuperViewGameXdInit.apply(this,arguments);\n\t\t\n\t\tfunction createSelectArea3D(thisGadget,relPath){\n\t\t\tthisGadget.getResource(\"image|\"+$this.mViewOptions.fullPath + relPath, function(image){\n\t\t\t\t\n\t\t\t\tvar c=document.createElement('canvas');\n\t\t\t\tc.width=c.height=CANVAS_SIZE;\n\t\t\t\tvar ctx=c.getContext(\"2d\");\n\t\t\t\tctx.fillStyle=\"#FF0000\";\n\t\t\t\tctx.fillRect(6,6,500,500); \n\t\t\t\tTHREE.ImageUtils.crossOrigin = \"anonymous\";\n\t\t\t\tctx.drawImage(image,0,0,CANVAS_SIZE,CANVAS_SIZE);\n\t\t\t\t\n\t\t\t\tvar texture = new THREE.Texture(c);\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tvar mat2 = new THREE.MeshPhongMaterial({\n\t\t\t\t\tmap : texture ,\n\t\t\t\t});\n\t\t\t\tvar plan = new THREE.Mesh(\n\t\t\t\t\t\tnew THREE.PlaneGeometry(1,1,1,1),\n\t\t\t\t\t\tmat2\t\t\t\t\t\t\t\n\t\t\t\t\t\t);\n\t\t\t\t\n\t\t\t\tvar empty = new THREE.Object3D();\n\t\t\t\tplan.position.y = .02;\n\t\t\t\tplan.rotation.x = -Math.PI/2;\n\t\t\t\tempty.add(plan);\n\t\t\t\tthisGadget.objectReady(empty);\n\t\t\t});\t\t\t\n\t\t}\t\n\t\t\n\t\txdv.createGadget(\"selection-posW1\",{\n            base:{\n                x:size*3.5,\n                y:size*1.5,\n                visible:true,\n            },\n            \"2d\":{\n                type:\"sprite\",\n                z:-1,\n                file: this.mViewOptions.fullPath + \"/res/musketeer/musketeer-select-1W.png\",\n                width:size,\n                height:size,\n            },          \n            \"3d\":{\n\t\t\t\ttype: \"custom3d\",\n\t\t\t\tscale: [1,1,1],\n\t\t\t\tcreate: function() {\n\t\t\t\t\tcreateSelectArea3D(this,\"/res/musketeer/musketeer-select-1W.png\");\t\t\t\t\t\n\t\t\t\t\treturn null;\n\t\t\t\t}\n            }\n    \n        });\n\t\txdv.createGadget(\"selection-posW2\",{\n            base:{\n                x:size*3.5,\n                y:size*0.5,\n                visible:true,\n            },\n            \"2d\":{\n                type:\"sprite\",\n                z:-1,\n                file: this.mViewOptions.fullPath + \"/res/musketeer/musketeer-select-2W.png\",\n                width:size,\n                height:size,\n            },\n            \"3d\":{\n\t\t\t\ttype: \"custom3d\",\n\t\t\t\tscale: [1,1,1],\n\t\t\t\tcreate: function() {\n\t\t\t\t\tcreateSelectArea3D(this,\"/res/musketeer/musketeer-select-2W.png\");\t\t\t\t\t\n\t\t\t\t\treturn null;\n\t\t\t\t}\n            }            \n        });\n\t\txdv.createGadget(\"selection-posB1\",{\n            base:{\n                x:size*-3.5,\n                y:size*-0.5,\n                visible:true,\n            },\n            \"2d\":{\n                type:\"sprite\",\n                z:-1,\n                file: this.mViewOptions.fullPath + \"/res/musketeer/musketeer-select-1B.png\",\n                width:size,\n                height:size,\n            },            \n            \"3d\":{\n\t\t\t\ttype: \"custom3d\",\n\t\t\t\tscale: [1,1,1],\n\t\t\t\tcreate: function() {\n\t\t\t\t\tcreateSelectArea3D(this,\"/res/musketeer/musketeer-select-1B.png\");\t\t\t\t\t\n\t\t\t\t\treturn null;\n\t\t\t\t}\n            }\n        });\t\n\t\t\n\t\txdv.createGadget(\"selection-posB2\",{\n            base:{\n                x:size*-3.5,\n                y:size*-1.5,\n                visible:true,\n            },\n            \"2d\":{\n                type:\"sprite\",\n                z:-1,\n                file: this.mViewOptions.fullPath + \"/res/musketeer/musketeer-select-2B.png\",\n                width:size,\n                height:size,\n            },\n            \"3d\":{\n\t\t\t\ttype: \"custom3d\",\n\t\t\t\tscale: [1,1,1],\n\t\t\t\tcreate: function() {\n\t\t\t\t\tcreateSelectArea3D(this,\"/res/musketeer/musketeer-select-2B.png\");\t\t\t\t\t\n\t\t\t\t\treturn null;\n\t\t\t\t}\n            }\n        });\n\t\txdv.createGadget(\"selection-board\",{\n\t\t\t\"base\":{\n\t\t\t\tx:0,\n\t\t\t\ty:0,\n\t\t\t\tvisible: true,\n\t\t\t},\n\t\t\t\"3d\":{\n\t\t\t\ttype: \"custom3d\",\n\t\t\t\tscale: [1,1,1],\n\t\t\t\tcreate: function() {\n\t\t\t\t\tvar geometry = new THREE.BoxGeometry(8.5,0.01,4.4);\n\t\t\t\t\tvar blackMat = new THREE.MeshPhongMaterial({\n\t\t\t\t\t\tcolor: '#000000',\n\t\t\t\t\t\tshininess: 100,\n\t\t\t\t\t\tspecular: '#222222',\n\t\t\t\t\t\temissive: '#000000',\n\t\t\t\t\t\ttransparent:true,\n\t\t\t\t\t\topacity: 0.9\n\t\t\t\t\t});\n\t\t\t\t\tvar cube = new THREE.Mesh( geometry, blackMat );\n\t\t\t\t\treturn cube;\t\t\t\t\t\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"2d\":{\n\t\t\t\ttype:\"element\",\n\t\t\t\tz:-1,\n\t\t\t\twidth: size*8,\n\t\t\t\theight: size*4,\n\t\t\t\tcss:{\n\t\t\t\t\t\"background-color\": \"rgba(0,0,0,0)\",\n\t\t\t\t\t/*\"border\" : \"solid 2px black\",\n\t\t\t\t\t\"border-radius\": \"5px\",*/\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n})();\n"],"file":"musketeer-chess-view.js"}